case 0x40: res="IN";
res += " B,(C)";
break;
case 0x41: res="OUT";
res += " (C),B";
break;
case 0x42: res="SBC";
res += " HL,BC";
break;
case 0x43: res="LD";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),BC"; address += 2;
break;
case 0x44:
case 0x4c:
case 0x54:
case 0x5c:
case 0x64:
case 0x6c:
case 0x74:
case 0x7c: res="NEG";
break;
case 0x45:
case 0x4d:
case 0x55:
case 0x5d:
case 0x65:
case 0x6d:
case 0x75:
case 0x7d: res="RETN";
break;
case 0x46:
case 0x4e:
case 0x66:
case 0x6e: res="IM";
res += " 0";
break;
case 0x47: res="LD";
res += " I,A";
break;
case 0x48: res="IN";
res += " C,(C)";
break;
case 0x49: res="OUT";
res += " (C),C";
break;
case 0x4a: res="ADC";
res += " HL,BC";
break;
case 0x4b: res="LD";
res += " BC,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x4f: res="LD";
res += " R,A";
break;
case 0x50: res="IN";
res += " D,(C)";
break;
case 0x51: res="OUT";
res += " (C),D";
break;
case 0x52: res="SBC";
res += " HL,DE";
break;
case 0x53: res="LD";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),DE"; address += 2;
break;
case 0x56:
case 0x76: res="IM";
res += " 1";
break;
case 0x57: res="LD";
res += " A,I";
break;
case 0x58: res="IN";
res += " E,(C)";
break;
case 0x59: res="OUT";
res += " (C),E";
break;
case 0x5a: res="ADC";
res += " HL,DE";
break;
case 0x5b: res="LD";
res += " DE,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x5e:
case 0x7e: res="IM";
res += " 2";
break;
case 0x5f: res="LD";
res += " A,R";
break;
case 0x60: res="IN";
res += " H,(C)";
break;
case 0x61: res="OUT";
res += " (C),H";
break;
case 0x62: res="SBC";
res += " HL,HL";
break;
case 0x63: res="LD";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),HL"; address += 2;
break;
case 0x67: res="RRD";
break;
case 0x68: res="IN";
res += " L,(C)";
break;
case 0x69: res="OUT";
res += " (C),L";
break;
case 0x6a: res="ADC";
res += " HL,HL";
break;
case 0x6b: res="LD";
res += " HL,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0x6f: res="RLD";
break;
case 0x70: res="IN";
res += " F,(C)";
break;
case 0x71: res="OUT";
res += " (C),0";
break;
case 0x72: res="SBC";
res += " HL,SP";
break;
case 0x73: res="LD";
res += " (" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + "),SP"; address += 2;
break;
case 0x78: res="IN";
res += " A,(C)";
break;
case 0x79: res="OUT";
res += " (C),A";
break;
case 0x7a: res="ADC";
res += " HL,SP";
break;
case 0x7b: res="LD";
res += " SP,(" + addressHtml((readbyte(address + 1) << 8) | readbyte(address)) + ")"; address += 2;
break;
case 0xa0: res="LDI";
break;
case 0xa1: res="CPI";
break;
case 0xa2: res="INI";
break;
case 0xa3: res="OUTI";
break;
case 0xa8: res="LDD";
break;
case 0xa9: res="CPD";
break;
case 0xaa: res="IND";
break;
case 0xab: res="OUTD";
break;
case 0xb0: res="LDIR";
break;
case 0xb1: res="CPIR";
break;
case 0xb2: res="INIR";
break;
case 0xb3: res="OTIR";
break;
case 0xb8: res="LDDR";
break;
case 0xb9: res="CPDR";
break;
case 0xba: res="INDR";
break;
case 0xbb: res="OTDR";
break;
